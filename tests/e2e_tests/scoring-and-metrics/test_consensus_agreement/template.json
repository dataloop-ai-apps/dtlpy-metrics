{
  "projectId": null,
  "orgId": null,
  "connections": [
    {
      "src": {
        "nodeId": "624caf34-bf03-4f9a-a709-667e2dbfc61f",
        "portId": "a81dd14f-4ae8-4387-ba6e-66294b960751"
      },
      "tgt": {
        "nodeId": "b5aade59-7ec1-450e-8ae6-866e33023faa",
        "portId": "b76b73a3-5cd9-44e8-9285-a68db5e9b884"
      },
      "condition": "{}",
      "action": "consensus_done"
    },
    {
      "src": {
        "nodeId": "4a40cb74-c8ac-4a0a-942f-072e04cd28df",
        "portId": "a2148190-1122-4f44-a925-59a5ba9b8765"
      },
      "tgt": {
        "nodeId": "624caf34-bf03-4f9a-a709-667e2dbfc61f",
        "portId": "7c7cf22b-7910-410e-878f-99fcf9799f8f"
      },
      "condition": "{}"
    },
    {
      "src": {
        "nodeId": "4a40cb74-c8ac-4a0a-942f-072e04cd28df",
        "portId": "a2148190-1122-4f44-a925-59a5ba9b8765"
      },
      "tgt": {
        "nodeId": "4a121126-8edf-476f-b72c-36a639c9573a",
        "portId": "7c978882-8dc2-4184-bff9-7b5726b5bd98"
      },
      "condition": "{}"
    },
    {
      "src": {
        "nodeId": "b5aade59-7ec1-450e-8ae6-866e33023faa",
        "portId": "4757714f-8426-4269-8a30-bcf09b1dab5c"
      },
      "tgt": {
        "nodeId": "4c4996ff-a5e9-448a-9820-8fd5924a6012",
        "portId": "1fa67675-bf97-461b-b8a1-6524e117bf82"
      },
      "condition": "{}",
      "action": "consensus passed"
    },
    {
      "src": {
        "nodeId": "b5aade59-7ec1-450e-8ae6-866e33023faa",
        "portId": "4757714f-8426-4269-8a30-bcf09b1dab5c"
      },
      "tgt": {
        "nodeId": "4c4996ff-a5e9-448a-9820-8fd5924a6012",
        "portId": "1fa67675-bf97-461b-b8a1-6524e117bf82"
      },
      "condition": "{}",
      "action": "consensus failed"
    }
  ],
  "startNodes": [
    {
      "nodeId": "4a40cb74-c8ac-4a0a-942f-072e04cd28df",
      "type": "root",
      "id": "85f4d3e0-90d5-4ca1-a53e-d947202d2b4e"
    }
  ],
  "variables": [
    {
      "name": "dataset",
      "type": "Dataset",
      "description": null
    }
  ],
  "description": "",
  "name": "consensus agreement",
  "templateKind": "org",
  "nodes": [
    {
      "id": "b5aade59-7ec1-450e-8ae6-866e33023faa",
      "inputs": [
        {
          "portId": "b76b73a3-5cd9-44e8-9285-a68db5e9b884",
          "nodeId": "b76b73a3-5cd9-44e8-9285-a68db5e9b884",
          "type": "Item",
          "name": "item",
          "displayName": "item",
          "io": "input"
        }
      ],
      "outputs": [
        {
          "portId": "4757714f-8426-4269-8a30-bcf09b1dab5c",
          "nodeId": "4757714f-8426-4269-8a30-bcf09b1dab5c",
          "type": "Item",
          "name": "item",
          "displayName": "item",
          "actions": [
            "consensus passed",
            "consensus failed"
          ],
          "io": "output"
        }
      ],
      "name": "Consensus Agreement",
      "type": "custom",
      "namespace": {
        "functionName": "consensus_agreement",
        "projectName": null,
        "serviceName": "scoring-and-metrics",
        "moduleName": "dlm_module",
        "packageName": "scoring-and-metrics"
      },
      "projectId": "c156c404-718c-4695-b187-87551cfb134c",
      "appName": "Scoring and metrics app",
      "dpkName": "scoring-and-metrics",
      "metadata": {
        "position": {
          "x": 1122,
          "y": 403,
          "z": 0
        },
        "componentGroupName": "data",
        "customNodeConfig": {
          "agreement_threshold": 0.5,
          "consensus_pass_keep_best": false,
          "consensus_fail_keep_all": true,
          "validation": {
            "valid": true,
            "errors": [
            ]
          }
        },
        "repeatable": true,
        "pipelineNodeName": "consensus_agreement"
      }
    },
    {
      "id": "624caf34-bf03-4f9a-a709-667e2dbfc61f",
      "inputs": [
        {
          "portId": "7c7cf22b-7910-410e-878f-99fcf9799f8f",
          "nodeId": "7c7cf22b-7910-410e-878f-99fcf9799f8f",
          "type": "Item",
          "name": "item",
          "displayName": "item",
          "io": "input"
        }
      ],
      "outputs": [
        {
          "portId": "a81dd14f-4ae8-4387-ba6e-66294b960751",
          "nodeId": "a81dd14f-4ae8-4387-ba6e-66294b960751",
          "type": "Item",
          "name": "item",
          "displayName": "item",
          "color": "#50223a",
          "actions": [
            "completed",
            "discard",
            "consensus_done"
          ],
          "io": "output"
        }
      ],
      "name": "Consensus Task",
      "type": "task",
      "namespace": {
        "functionName": "move_to_task",
        "projectName": "DataloopTasks",
        "serviceName": "pipeline-utils",
        "moduleName": "default_module",
        "packageName": "pipeline-utils"
      },
      "projectId": "f8a4b8ce-5ff3-4386-84dc-1bda3a5bc92a",
      "metadata": {
        "position": {
          "x": 727,
          "y": 403,
          "z": 0
        },
        "taskType": "annotation",
        "consensusTaskType": "consensus",
        "priority": 2,
        "componentGroupName": "labeling",
        "repeatable": true,
        "dueDate": 0
      }
    },
    {
      "id": "4a40cb74-c8ac-4a0a-942f-072e04cd28df",
      "inputs": [
        {
          "portId": "efd36679-8930-4529-bd39-0a3d3b0c974e",
          "nodeId": "efd36679-8930-4529-bd39-0a3d3b0c974e",
          "type": "Dataset",
          "name": "dataset",
          "displayName": "dataset",
          "variableName": "dataset",
          "io": "input"
        }
      ],
      "outputs": [
        {
          "portId": "a2148190-1122-4f44-a925-59a5ba9b8765",
          "nodeId": "a2148190-1122-4f44-a925-59a5ba9b8765",
          "type": "Item",
          "name": "item",
          "displayName": "item",
          "io": "output"
        }
      ],
      "name": "preprocess",
      "type": "code",
      "namespace": {
        "functionName": "run",
        "packageName": "",
        "serviceName": ""
      },
      "projectId": null,
      "config": {
        "package": {
          "code": "import dtlpy as dl\n\n\nclass ServiceRunner:\n    def run(self, dataset: dl.Dataset):\n        filters = dl.Filters()\n        filters.add(field='metadata.single_item_test', values=True)\n        items = dataset.items.list(filters=filters)\n        if items.items_count != 1:\n            raise ValueError(f\"Expected 1 item, got {len(items)}\")\n        item = list(items.all())[0]\n        return item\n",
          "name": "run",
          "type": "code",
          "codebase": {
            "type": "item"
          }
        }
      },
      "metadata": {
        "position": {
          "x": 446.23455810546875,
          "y": 405,
          "z": 0
        },
        "componentGroupName": "automation",
        "codeApplicationName": "preprocess",
        "repeatable": true
      }
    },
    {
      "id": "4a121126-8edf-476f-b72c-36a639c9573a",
      "inputs": [
        {
          "portId": "7c978882-8dc2-4184-bff9-7b5726b5bd98",
          "nodeId": "7c978882-8dc2-4184-bff9-7b5726b5bd98",
          "type": "Item",
          "name": "item",
          "displayName": "item",
          "io": "input"
        }
      ],
      "outputs": [
        {
          "portId": "e755d461-a4cc-4c8b-95d6-d55404f04f98",
          "nodeId": "e755d461-a4cc-4c8b-95d6-d55404f04f98",
          "type": "Item",
          "name": "item",
          "displayName": "item",
          "io": "output"
        }
      ],
      "name": "status-handler",
      "type": "code",
      "namespace": {
        "functionName": "run",
        "packageName": "",
        "serviceName": ""
      },
      "projectId": null,
      "config": {
        "package": {
          "code": "import dtlpy as dl\nimport time\nimport logging\n\nlogger = logging.getLogger(name='dtlpytest')\n\n\nclass ServiceRunner:\n    def run(self, item: dl.Item, context: dl.Context):\n        tries = 15\n        curr_try = 0\n\n        pipeline = context.pipeline\n        task: dl.Task = None\n        consensus_items_dir = None\n\n        task_found = False\n        while not task_found:\n            if curr_try >= tries:\n                raise Exception(\"TIMEOUT: Task not found\")\n\n            try:\n                task: dl.Task = item.dataset.tasks.get(task_name=f\"Consensus Task ({pipeline.name})\")\n                consensus_items_dir = f\"/.consensus/{task.id}{item.dir}\"\n                if consensus_items_dir.endswith(\"/\"):\n                    consensus_items_dir = consensus_items_dir[:-1]\n                task_found = True\n            except dl.exceptions.NotFound:\n                logger.warning(\"Task not found, waiting for task to be created\")\n                time.sleep(5)\n\n        curr_try = 0\n        items_found = False\n        requested_consensus_items = None\n        while not items_found:\n            if curr_try >= tries:\n                raise Exception(\"TIMEOUT: Items not found\")\n\n            consensus_items = task.get_items(get_consensus_items=True)\n            if isinstance(consensus_items, dl.entities.PagedEntities):\n                consensus_items = list(consensus_items.all())\n\n            filtered_consensus_items = []\n            for consensus_item in consensus_items:\n                if consensus_item.dir == consensus_items_dir:\n                    filtered_consensus_items.append(consensus_item)\n\n            if len(filtered_consensus_items) == 2:\n                requested_consensus_items = filtered_consensus_items\n                items_found = True\n            else:\n                logger.warning(\"Items not found, waiting for items to be created\")\n                time.sleep(5)\n\n        item1: dl.Item = requested_consensus_items[0]\n        builder1 = item1.annotations.builder()\n        builder1.add(annotation_definition=dl.Classification(label=\"car1\"))\n        builder1.upload()\n        item1.update_status(status=dl.ItemStatus.COMPLETED, task_id=task.id)\n\n        item2: dl.Item = requested_consensus_items[1]\n        builder2 = item2.annotations.builder()\n        builder2.add(annotation_definition=dl.Classification(label=\"car1\"))\n        builder2.upload()\n        item2.update_status(status=dl.ItemStatus.COMPLETED, task_id=task.id)\n\n        return item\n",
          "name": "run",
          "type": "code",
          "codebase": {
            "type": "item"
          }
        }
      },
      "metadata": {
        "position": {
          "x": 726.7283905406058,
          "y": 548.1851588119695,
          "z": 0
        },
        "componentGroupName": "automation",
        "codeApplicationName": "status-handler",
        "repeatable": true
      }
    },
    {
      "id": "4c4996ff-a5e9-448a-9820-8fd5924a6012",
      "inputs": [
        {
          "portId": "1fa67675-bf97-461b-b8a1-6524e117bf82",
          "nodeId": "1fa67675-bf97-461b-b8a1-6524e117bf82",
          "type": "Item",
          "name": "item",
          "displayName": "item",
          "io": "input"
        }
      ],
      "outputs": [
        {
          "portId": "c3ebfd00-18e0-4916-8da0-d12fc6d07e26",
          "nodeId": "c3ebfd00-18e0-4916-8da0-d12fc6d07e26",
          "type": "Item",
          "name": "item",
          "displayName": "item",
          "io": "output"
        }
      ],
      "name": "postprocess",
      "type": "code",
      "namespace": {
        "functionName": "run",
        "packageName": "",
        "serviceName": ""
      },
      "projectId": null,
      "config": {
        "package": {
          "code": "import dtlpy as dl\n\n\nclass ServiceRunner:\n    def run(self, item: dl.Item, context: dl.Context = None):\n        action = context.event.action\n        if action != \"consensus passed\":\n            raise ValueError(f\"Expected 'consensus passed', got {action}\")\n        return item\n",
          "name": "run",
          "type": "code"
        }
      },
      "metadata": {
        "position": {
          "x": 1542.777702425733,
          "y": 404.97533878279313,
          "z": 0
        },
        "componentGroupName": "automation",
        "codeApplicationName": "postprocess",
        "repeatable": true
      }
    }
  ],
  "preview": "675f0722bd7450975afa54ec",
  "_id": "675f07857cda85ac1c1a069c"
}