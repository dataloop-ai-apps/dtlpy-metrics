{
  "projectId": null,
  "orgId": null,
  "connections": [
    {
      "src": {
        "nodeId": "4a40cb74-c8ac-4a0a-942f-072e04cd28df",
        "portId": "a2148190-1122-4f44-a925-59a5ba9b8765"
      },
      "tgt": {
        "nodeId": "624caf34-bf03-4f9a-a709-667e2dbfc61f",
        "portId": "7c7cf22b-7910-410e-878f-99fcf9799f8f"
      },
      "condition": "{}"
    },
    {
      "src": {
        "nodeId": "4a40cb74-c8ac-4a0a-942f-072e04cd28df",
        "portId": "a2148190-1122-4f44-a925-59a5ba9b8765"
      },
      "tgt": {
        "nodeId": "4a121126-8edf-476f-b72c-36a639c9573a",
        "portId": "7c978882-8dc2-4184-bff9-7b5726b5bd98"
      },
      "condition": "{}"
    },
    {
      "src": {
        "nodeId": "624caf34-bf03-4f9a-a709-667e2dbfc61f",
        "portId": "a81dd14f-4ae8-4387-ba6e-66294b960751"
      },
      "tgt": {
        "nodeId": "88a730c3-b025-4675-97ad-475f9de044d7",
        "portId": "a106465b-eb24-451f-8e22-e1096892c5b6"
      },
      "condition": "{}",
      "action": "consensus_done"
    },
    {
      "src": {
        "nodeId": "88a730c3-b025-4675-97ad-475f9de044d7",
        "portId": "b0fea410-f071-492b-83d6-2a0016084b8f"
      },
      "tgt": {
        "nodeId": "5976da23-b261-4410-a96d-4daa1cf9bce9",
        "portId": "76e2024b-0c70-4fb6-9743-12a30eed300a"
      },
      "condition": "{}"
    }
  ],
  "startNodes": [
    {
      "nodeId": "4a40cb74-c8ac-4a0a-942f-072e04cd28df",
      "type": "root",
      "id": "85f4d3e0-90d5-4ca1-a53e-d947202d2b4e"
    }
  ],
  "variables": [
    {
      "name": "dataset",
      "type": "Dataset",
      "description": null
    }
  ],
  "description": "",
  "name": "consensus score",
  "templateKind": "org",
  "nodes": [
    {
      "id": "624caf34-bf03-4f9a-a709-667e2dbfc61f",
      "inputs": [
        {
          "portId": "7c7cf22b-7910-410e-878f-99fcf9799f8f",
          "nodeId": "e3f3a6d2-e4fd-4b78-b716-af93de93f170",
          "type": "Item",
          "name": "item",
          "displayName": "item",
          "io": "input"
        }
      ],
      "outputs": [
        {
          "portId": "a81dd14f-4ae8-4387-ba6e-66294b960751",
          "nodeId": "5effd957-fe69-4940-a2c1-6442f95b6c27",
          "type": "Item",
          "name": "item",
          "displayName": "item",
          "color": "#50223a",
          "actions": [
            "completed",
            "discard",
            "consensus_done"
          ],
          "io": "output"
        }
      ],
      "name": "Consensus Task",
      "type": "task",
      "namespace": {
        "functionName": "move_to_task",
        "projectName": "DataloopTasks",
        "serviceName": "pipeline-utils",
        "moduleName": "default_module",
        "packageName": "pipeline-utils"
      },
      "projectId": "f8a4b8ce-5ff3-4386-84dc-1bda3a5bc92a",
      "metadata": {
        "position": {
          "x": 727,
          "y": 403,
          "z": 0
        },
        "taskType": "annotation",
        "consensusTaskType": "consensus",
        "priority": 2,
        "componentGroupName": "labeling",
        "repeatable": true,
        "dueDate": 0
      }
    },
    {
      "id": "4a40cb74-c8ac-4a0a-942f-072e04cd28df",
      "inputs": [
        {
          "portId": "efd36679-8930-4529-bd39-0a3d3b0c974e",
          "nodeId": "f9457d76-97ec-49e4-9d72-0db749061133",
          "type": "Dataset",
          "name": "dataset",
          "displayName": "dataset",
          "variableName": "dataset",
          "io": "input"
        }
      ],
      "outputs": [
        {
          "portId": "a2148190-1122-4f44-a925-59a5ba9b8765",
          "nodeId": "ff424100-ebdb-4057-a449-f914bcb8df59",
          "type": "Item",
          "name": "item",
          "displayName": "item",
          "io": "output"
        }
      ],
      "name": "preprocess",
      "type": "code",
      "namespace": {
        "functionName": "run",
        "packageName": "",
        "serviceName": ""
      },
      "projectId": null,
      "config": {
        "package": {
          "code": "import dtlpy as dl\n\n\nclass ServiceRunner:\n    def run(self, dataset: dl.Dataset):\n        filters = dl.Filters()\n        filters.add(field='metadata.single_item_test', values=True)\n        items = dataset.items.list(filters=filters)\n        if items.items_count != 1:\n            raise ValueError(f\"Expected 1 item, got {len(items)}\")\n        item = list(items.all())[0]\n        return item\n",
          "name": "run",
          "type": "code",
          "codebase": {
            "type": "item"
          }
        }
      },
      "metadata": {
        "position": {
          "x": 446.23455810546875,
          "y": 405,
          "z": 0
        },
        "componentGroupName": "automation",
        "codeApplicationName": "preprocess",
        "repeatable": true
      }
    },
    {
      "id": "4a121126-8edf-476f-b72c-36a639c9573a",
      "inputs": [
        {
          "portId": "7c978882-8dc2-4184-bff9-7b5726b5bd98",
          "nodeId": "9175f172-c157-4aba-b1c2-de9aad0b1259",
          "type": "Item",
          "name": "item",
          "displayName": "item",
          "io": "input"
        }
      ],
      "outputs": [
        {
          "portId": "e755d461-a4cc-4c8b-95d6-d55404f04f98",
          "nodeId": "c756d36d-4392-4386-a02e-e8b4bf8a4940",
          "type": "Item",
          "name": "item",
          "displayName": "item",
          "io": "output"
        }
      ],
      "name": "status-handler",
      "type": "code",
      "namespace": {
        "functionName": "run",
        "packageName": "",
        "serviceName": ""
      },
      "projectId": null,
      "config": {
        "package": {
          "code": "import dtlpy as dl\nimport time\nimport logging\n\nlogger = logging.getLogger(name='dtlpytest')\n\n\nclass ServiceRunner:\n    def run(self, item: dl.Item, context: dl.Context):\n        tries = 15\n        curr_try = 0\n\n        pipeline = context.pipeline\n        task: dl.Task = None\n        consensus_items_dir = None\n\n        task_found = False\n        while not task_found:\n            if curr_try >= tries:\n                raise Exception(\"TIMEOUT: Task not found\")\n\n            try:\n                task: dl.Task = item.dataset.tasks.get(task_name=f\"Consensus Task ({pipeline.name})\")\n                consensus_items_dir = f\"/.consensus/{task.id}{item.dir}\"\n                if consensus_items_dir.endswith(\"/\"):\n                    consensus_items_dir = consensus_items_dir[:-1]\n                task_found = True\n            except dl.exceptions.NotFound:\n                logger.warning(\"Task not found, waiting for task to be created\")\n                time.sleep(5)\n\n        curr_try = 0\n        items_found = False\n        requested_consensus_items = None\n        while not items_found:\n            if curr_try >= tries:\n                raise Exception(\"TIMEOUT: Items not found\")\n\n            consensus_items = task.get_items(get_consensus_items=True)\n            if isinstance(consensus_items, dl.entities.PagedEntities):\n                consensus_items = list(consensus_items.all())\n\n            filtered_consensus_items = []\n            for consensus_item in consensus_items:\n                if consensus_item.dir == consensus_items_dir:\n                    filtered_consensus_items.append(consensus_item)\n\n            if len(filtered_consensus_items) == 2:\n                requested_consensus_items = filtered_consensus_items\n                items_found = True\n            else:\n                logger.warning(\"Items not found, waiting for items to be created\")\n                time.sleep(5)\n\n        item_label_map_list = [\n            {\"item\": requested_consensus_items[0], \"label\": \"car1\"},\n            {\"item\": requested_consensus_items[1], \"label\": \"car1\"}\n        ]\n\n        task_item: dl.Item\n        for item_label_map in item_label_map_list:\n            task_item = item_label_map[\"item\"]\n            label = item_label_map[\"label\"]\n            builder = task_item.annotations.builder()\n            item_refs = task_item.metadata.get(\"system\", dict()).get(\"refs\", list())\n            if len(item_refs) != 0:\n                item_assignment_id = None\n                item_task_id = None\n                for ref in item_refs:\n                    if ref.get(\"type\", None) == \"assignment\" and item_assignment_id is None:\n                        item_assignment_id = ref.get(\"id\", None)\n                    if ref.get(\"type\", None) == \"task\" and item_task_id is None:\n                        item_task_id = ref.get(\"id\", None)\n            else:\n                raise ValueError(f\"No assignment ID found in item [ID: {task_item.id}] refs\")\n            metadata = {\"system\": {\"assignmentId\": item_assignment_id, \"taskId\": item_task_id}}\n            builder.add(annotation_definition=dl.Classification(label=label), metadata=metadata)\n            builder.upload()\n            task_item.update_status(status=dl.ItemStatus.COMPLETED, task_id=task.id)\n\n        return item\n",
          "name": "run",
          "type": "code",
          "codebase": {
            "type": "item"
          }
        }
      },
      "metadata": {
        "position": {
          "x": 726.7283905406058,
          "y": 548.1851588119695,
          "z": 0
        },
        "componentGroupName": "automation",
        "codeApplicationName": "status-handler",
        "repeatable": true
      }
    },
    {
      "id": "5976da23-b261-4410-a96d-4daa1cf9bce9",
      "inputs": [
        {
          "portId": "76e2024b-0c70-4fb6-9743-12a30eed300a",
          "nodeId": "da27ae23-bb4c-4078-807a-c3d3b456d82c",
          "type": "Item",
          "name": "item",
          "displayName": "item",
          "io": "input"
        }
      ],
      "outputs": [
        {
          "portId": "604a4ca2-32c1-4ced-af3a-7528568e56c4",
          "nodeId": "42babb25-abf3-4f91-a682-bc6ab3eb59da",
          "type": "Item",
          "name": "item",
          "displayName": "item",
          "io": "output"
        }
      ],
      "name": "postprocess",
      "type": "code",
      "namespace": {
        "functionName": "run",
        "packageName": "",
        "serviceName": ""
      },
      "projectId": null,
      "config": {
        "package": {
          "code": "import dtlpy as dl\n\nclass ServiceRunner:\n\n    def run(self, item):\n        return item\n",
          "name": "run",
          "type": "code",
          "codebase": {
            "type": "item"
          }
        }
      },
      "metadata": {
        "position": {
          "x": 1559.7630086887848,
          "y": 405,
          "z": 0
        },
        "componentGroupName": "automation",
        "codeApplicationName": "pass",
        "repeatable": true
      }
    },
    {
      "id": "88a730c3-b025-4675-97ad-475f9de044d7",
      "inputs": [
        {
          "portId": "a106465b-eb24-451f-8e22-e1096892c5b6",
          "nodeId": "a106465b-eb24-451f-8e22-e1096892c5b6",
          "type": "Item",
          "name": "item",
          "displayName": "item",
          "io": "input"
        }
      ],
      "outputs": [
        {
          "portId": "b0fea410-f071-492b-83d6-2a0016084b8f",
          "nodeId": "b0fea410-f071-492b-83d6-2a0016084b8f",
          "type": "Item",
          "name": "item",
          "displayName": "item",
          "io": "output"
        }
      ],
      "name": "Create Consensus Score",
      "type": "custom",
      "namespace": {
        "functionName": "create_task_item_score",
        "projectName": null,
        "serviceName": "scoring-and-metrics",
        "moduleName": "dlm_module",
        "packageName": "scoring-and-metrics"
      },
      "projectId": null,
      "appName": "Scoring and metrics app",
      "dpkName": "scoring-and-metrics",
      "metadata": {
        "position": {
          "x": 1122,
          "y": 403,
          "z": 0
        },
        "componentGroupName": "data",
        "repeatable": true,
        "pipelineNodeName": "create_task_item_score"
      }
    }
  ],
  "preview": "67aa205820f9bf2d34879ca4",
  "_id": "67aa20c7bd57d1631e7777bb"
}